# -*- coding: utf-8 -*-
"""Day 10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qq3FGLKY-q5YUbNzupqWqgqMcnUfXhkW

# Logistic Regression -->
It is a supervised machine learning algorithm used for classification task. Its is used to predict probablity of an Instance of a class.
"""

# Sygmoid --> return the probablity
# threshold value --> typically ->    y < 0.5 --> Classified in class zero
                                    # y = 0
                                    # x >= 0.5 --> Classified in class one

'''
Class function ( or Binary Cross Entropy) -> Its quantitifies the difference between the predicted probabilites and actual class level.
                                             Its also help to align the probabilistic interpretation of logistic regression.
'''

#  ************************************************  IMPLEMENTATION  ************************************************

# from google.colab import drive
# drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = sns.load_dataset('iris')

df.head()

df.isnull().sum()

df.columns

df['species'].value_counts()

# removing setosa
df = df[df['species'] != 'setosa']

df.head()

# map target variable

df['species'] = df['species'].map({'versicolor':0,'virginica':1})

df.head()

x= df.iloc[:,:-1]
y = df.iloc[:,-1]
# iloc is used to perform index based slicing

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25,random_state=42)

x_train.head()

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

model.fit(x_train,y_train)

cor = df.corr(numeric_only=True)
sns.heatmap(cor,annot=True)
plt.show()

model.score(x_test,y_test)

from sklearn.metrics import accuracy_score
y_pred = model.predict(x_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy of the model: {accuracy}")

from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

'''

'''